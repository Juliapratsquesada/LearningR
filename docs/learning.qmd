---
title: "Reproducible document"
author: "Julia Prats"
format: html
---

## Basics of R

```{r}
1 + 1
```
---

## About me
- Júlia Prats, Center for Basic Metabolic Research, University of Copenhagen
- **Position**: PhD student
- *Proteomics*, *Skeletal Muscle*, *Metabolism*

---

## Simple code
```{r}
3 * 3
```

## Testing for Git
- I don't like chocolate 


## Setup code chunk

```{r setup}
# with the message and warning we are telling R to avoid including all the junk information we don't need. Don't include the code junk but still run it. There are other common options are: include, echo, results, eval - look in the course information.
#| message: false
#| warning: false
library(tidyverse)
post_meal_data <- read_csv2(
  here::here("data/post-meal-insulin.csv")
)

# csv reads data separated by ","
# csv2 reads data separated by ";"

# We create a smaller dataset, with only the variables that we want to study for now
small_post_meal <- select(post_meal_data, id, Age, BMI, Group, auc_pg, auc_ins, glykemi)

# We create a tidy data in which we rename some of the columns, then we only keep those which have glykemi = 0, and then remove the column glykemi
tidier_post_meal_data <- small_post_meal |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  ) |>
  filter(glykemi == 0) |>
  select(-glykemi)
```

spaces are important in Rstudio

## Showing the data 

```{r}
post_meal_data
```

A nicer way of looking at the data is (according to Luke): 

```{r}
glimpse(post_meal_data)
```

Commit; we would not commit the data (so the .csv file) but in this case it is very small so we will commit everything. Normally we would not commit the html either because it is a temporary file. 

By looking at the data there are a few things that can be improved:
1.Too similar names
2.Too many IDs - what is the unique id
3.Decimal places
4.Order Ids
5.Different variables in one cell? Where are the units
6.There is two Fat.mass and two OGTT 
7.Capital letters that don't make sense
8.Separate datasets to avoid so many variables in one set


?colnames
help(colnames)

```{r}
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```



```{r}
#| fig-cap: "Distribution of BMI"
#| label: fig-bmi-histo
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```
You use "" when we are writing in natural language and no code language"@
If you want to reference in the text just write @ in front of label

@fig-bmi-histo

---

## Exercise: discrete plots

```{r group bar}
#| fig-cap: "Group"
#| label: fig-group-bar
ggplot(post_meal_data, aes(x = Group)) +
  geom_bar()
```

See @fig-group-bar

```{r glykemi bar}
#| fig-cap: "glykemi"
#| label: fig-glykemi-bar
ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```

See @fig-glykemi-bar

If we want to plot two discrete variables we can try the following:
Two different groups, are two different colors

```{r}
post_meal_data |>
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar()
```
Two make it easier for the eyes to understand the data, we separate it side by side. 

```{r}
post_meal_data |>
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar(position = position_dodge())
```


## Putting two plots side by side

```{r histogram}
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```

```{r bar}
ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```

```{r side-by-side-figs}
#| label: fig-bmi-glycemia
#| fig-cap: "BMI and glycemia, side by side"
#| fig-subcap:
#| - "Distribution of BMI"
#| - "Number of those with glycemia"
#| layout-ncol: 2

ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()

ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```


## Using styler to fix code styling issues

To fix the styling issues, we can use a package called styler, which follows the tidyverse style guide, to automatically reformat our code into the correct style.


## Plotting two continuous variables

```{r continuous variables}
#| fig-cap: "Scatterplot showing BMI against AUC of blood glucose"
#| label: fig-bmi-auc-pg
ggplot(post_meal_data, aes(x = BMI, y = auc_pg)) +
  geom_point() +
  geom_smooth()
```

geom_point(), create a standard scatterplot.
geom_hex(), to replace geom_point() when your data are massive and creating points for each value takes too long to plot.
geom_smooth(), applies a “regression-type” line to the data.

## Pushing changes to remote

## Pull changes locally


## Selecting data 
```{r}
select(post_meal_data, Age)

select(post_meal_data, Age, BMI, Weight)

# All variables minus Group
select(post_meal_data, -Group)
```
This last line shows all variables minus Group. If you check the columns there is only 84 instead of the 85 originally in the raw data

```{r}
# This one includes only those that start with "PG"
select(post_meal_data, starts_with("PG"))
```

```{r}
# All columns that end with "DXA"
select(post_meal_data, ends_with("DXA"))

# All columns containing the number "0"
select(post_meal_data, contains("0"))
```

## Renaming specific columns
```{r renaming specific columns}
small_post_meal |>
  rename(auc_glucose = auc_pg)

# To rename multiple variables
small_post_meal |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  )
```


## Select and rename tasks

```{r Exercise select and rename}
# Task 1.
post_meal_data |>
  select(contains("OGTT"))

# Task 2.
post_meal_data |>
  select(contains(".."), -contains("...")) |>
  rename(
    P.Glucose.minus5.OGTT = P.Glucose..5.OGTT,
    Insulin.minus5.OGTT.X = Insulin..5.OGTT.X
  )

# Task 3.
post_meal_data |>
  select(id, BMI, Length, Weight, Age) |>
  rename(Height = Length)
```


## Filtering data by row

```{r filtering data}
small_post_meal |>
  filter(glykemi == 1)

small_post_meal |>
  filter(BMI >= 25)

small_post_meal |>
  filter(Group == "CTR")
```

```{r}
# "," or "&" mean AND. Only those that comply with these conditions will be included
small_post_meal |>
  filter(Group == "CTR", BMI >= 25)

# "|" means OR, those that have one of the conditions will be included
small_post_meal |>
  filter(Group == "CTR" | BMI >= 25)
```
